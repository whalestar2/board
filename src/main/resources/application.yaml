debug: false # 스프링 부트의 디버그 로그를 다 볼 수 있는지 여부 결정. (너무 많아서 스업시간 떄는 false로 놓고 할거임)
# true로 놓으면 디버그가 자동으로 실행 되니까 복잡해져 따라서 false로 놓고 하자

management.endpoints.web.exposure.include: "*"
#actuator의 감쳐줘 있는 것들을 다 볼 수 있게 해줌(개발단계에서 보고 싶은 기능을 다 볼 수 있게 해줌)

logging:
  level:
    com.bitstudy.board: debug # 루트 패키기에서 발행하는 모든 로그는 debug 레벨로 보겠다 라는 뜻
    org.springframework.web.servlet: debug # 멘 위에 있는 debug : false랑 관련 없는 것. 저게 true일때 너무 많은 로그가 나오기 때문에 보기가 힘듬. 그래서 저걸 false로 놓고 request, response 로그만 따로 뽑아서 보겠다 라는 뜻.
    org.hibernate.type.descriptor.sql.BasicBinder: trace # JPA가 구동 될때 돌아가는 엔진 이름이 hibernate
    #JAP기술을 사용할때 쿼리 로그를 디버그 로그로 관찰 할수 있게 해줌(이떄 돌아가는 파라미터 들은 다 물음표 나옴, 그걸 볼 수 있게 해주는 것)
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: bitstudy
    password: whalestar0815
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    defer-datasource-initialization: true # test용 데이터베이스 데이터를 생성 할 수 있게 해주는 것(무조건 data.sql 이라는 파일을 만들어서 초기 데이터 넣어줘야 함)
    hibernate.ddl-auto: create # 엔티티를 보고 필요한 테이블 데이터를 유추해서 처음으로 DDL 데이터를 만듦
    # domain에 있는 Entity 파일들을 보고 create table 문을 만들어서 테스트가 실행될때 자동으로 테이블들 생성
    show-sql: true # 디버그 모드에서 sql 보여줄지 여부(true / false)
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
  h2.console.enabled: false
  sql.init.mode: always # 저 위에서 언급한 data.sql 을 언제 작동시킬건지 결정하는 여부
  # never(사용안함) , always(리얼 환경), Embedded(embedded)(테스트 때만)

  #  RESTful & HAL 관련
  data:
    rest:
      base-path: /api # 엑셀에서(EndPoint) 설계한거대로 맨 앞에 /api를 붙인거임
      detection-strategy: annotated # 레퍼지토리의 노출 범위 결정
        # default - 모든 public 레포지토리 인터페이스 표시(그러나 @RestResource 가 포함된것만 노출)
        # all - 모든 레포지토리 노출
      # annotated - 지정한것만 노출
      # visibility - public 인 레포지토리만 노출


